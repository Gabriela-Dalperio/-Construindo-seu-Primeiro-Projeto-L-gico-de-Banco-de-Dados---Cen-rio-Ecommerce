-- criação do banco de dados para o cenário de E-commerce
-- drop database ecommerce;
-- create database ecommerce;
use ecommerce;

-- criar tabela cliente
create table client(
	idClient int auto_increment primary key,
    Fname varchar(15),
    Minit char (3),
    Lname varchar (20),
    IdentificationType ENUM ('CPF','CNPJ') not null,
    IdentificationNumber char (15) not null,
    Bdate date, 
    Adreess varchar (255),
    constraint unique_identificationNumber unique (IdentificationNumber)
);
-- alter table client auto_increment=1;
-- alter table client;

-- criar tabela produto
create table product(
	idProduct int auto_increment primary key,
    Pname varchar (100) not null,
    Classification_Kids bool default false,
    Category ENUM ('Eletrônico e Dispositivos', 'Moda e Beleza', 'Brinquedos e Itens para Crianças e Bebês',
					'Alimentos e Bebidas', 'Casa e Construção', 'Livros e Ebooks', 'Saúde e Cuidados Pessoais',
                    'Pet Shop','Esportes') not null,
	Avaliation float default 0,
	PDescription varchar (50),
    Size varchar(13),
    Price decimal(10,2) not null,
    Estoque ENUM ('Em estoque', 'Aguardando reposição')
);
-- alter table product auto_increment=1;
-- alter table product;

-- criar tabela de pedido
-- paymentcash = boleto, se não for ele, o método de pagamento é da outra tabela
create table Orders(
	idOrder int auto_increment primary key,
    idOrderClient int,
    idOrderPaymentMethod int,
    OrderStatus ENUM('Cancelado', 'Confirmado', 'Em processamento') default 'Em processamento',
	OrderDescription varchar (255),
    SendValue float default 10,
    OrderDate date,
	Total_Price decimal (10,2) not null,
	PaymentCash bool default false,
    constraint fk_order_client foreign key (idOrderClient) references client (idClient)
		on update cascade
);
-- alter table orders;
-- alter table Orders auto_increment=1;


-- criar tabela método de pagamento
create table payment(
	idClient int,
    idOrder int,
    idPayment int,
    Payment_Method ENUM ('Boleto','Cartão', '2 ou mais Cartões') not null,
    Cname varchar(30),
    Cnumber int,
    ValidDate date,
    CV char(3),
	primary key (idClient, idOrder, idPayment),
    constraint fk_payment_client foreign key (idClient) references client(idClient),
    constraint fk_payment_order foreign key (idOrder) references Orders(idOrder),
    CHECK (Payment_Method = 'Boleto' OR (Payment_Method IN ('Cartão', '2 ou mais Cartões') AND (Cname AND Cnumber AND ValidDate AND CV )IS NOT NULL))
);
-- alter table payment;

-- criar tabela estoque
create table productStorage(
	idProdStorage int auto_increment primary key,
    idProduct int not null,
    StorageLocation varchar(45),
    Quantity int default 0,
    constraint fk_productStorage_product foreign key (idProduct) references product(idProduct)
);
-- alter table productStorage auto_increment=1;
-- alter table productStorage;

-- criar tabela fornecedor
create table supplier(
	idSupplier int auto_increment primary key,
    SocialName varchar(255) not null,
    CNPJ char(15) not null,
    Contact char(11) not null,
    constraint unique_cnpj_supplier unique (CNPJ)
);
-- alter table supplier auto_increment=1;

-- criar tabela vendedor
create table seller(
	idSeller int auto_increment primary key,
    SellerSocialName varchar(255) not null,
	AbstName varchar(255),
    SellerIdentificationType ENUM ('CPF','CNPJ') not null,
	SellerIdentificationNumber varchar(15),
    SellerLocation varchar(255),
    constraint unique_SellerIdentificationNumber unique (SellerIdentificationNumber)
);
-- alter table seller auto_increment=1;
-- alter table seller;

-- criar tabela ProdutoVendedor (terceiro)
create table productSeller(
	idPSeller int,
    idPproduct int,
    ProductQuantity int default 1,
    primary key (idPSeller, idPproduct),
    constraint fk_product_seller foreign key (idPSeller) references seller(idSeller),
    constraint fk_product_product foreign key (idPproduct) references product(idProduct)
);

-- criar tabela Relação de Produto/Pedido
create table productOrder(
	idPOproduct int,
    idPOorder int,
    poQuantity int default 1,
    poStatus ENUM ('Disponível','Sem estoque') default 'Disponível',
    primary key (idPOproduct, idPOorder),
    constraint fk_productorder_seller foreign key (idPOproduct) references product(idProduct),
    constraint fk_productorder_product foreign key (idPOorder) references orders(idOrder)
);

-- criar tabela storageLocation
create table storageLocation(
	idLproduct int,
    idLstorage int,
    Location varchar(255) not null,
    primary key (idLproduct, idLstorage),
    constraint fk_StorageLocation_product foreign key (idLproduct) references product(idProduct),
    constraint fk_StorageLocation_storage foreign key (idLstorage) references productStorage(idProdStorage)
);
alter table storageLocation;

-- criar tabela fornecedor disponibiliza produto
create table productSupplier(
	idPsSupplier int,
    idPsProduct int,
    Quantity int not null,
    primary key (idPsSupplier,  idPsProduct),
    constraint fk_product_supllier_supplier foreign key (idPsSupplier) references supplier(idSupplier),
    constraint fk_product_supllier_product foreign key (idPsProduct) references product(idProduct)
);

create table Delivery (
    idDelivery int auto_increment primary key,
    idDOrder int not null, 
    DeliveryStatus ENUM('Pendente', 'Em trânsito', 'Entregue', 'Falha na entrega') not null,
    TrackingCode varchar(100) unique not null, 
    DeliveryDate date, 
    DeliveryMethod ENUM('Transportadora', 'Correios') not null, 
    DeliveryAddress varchar(255), 
    constraint fk_orderdelivery foreign  key (idDOrder) references orders(idOrder) 
    on delete cascade
);
-- alter table delivery auto_increment=1;
-- alter table delivery;

